// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WooneasyManagement.Persistence.Contexts;

#nullable disable

namespace WooneasyManagement.Persistence.Migrations
{
    [DbContext(typeof(WooneasyManagementDbContext))]
    [Migration("20240215141157__added_cover_image_column_to__city_entity")]
    partial class _added_cover_image_column_to__city_entity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PropertyPropertyAmenity", b =>
                {
                    b.Property<Guid>("PropertiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PropertyAmenitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("PropertiesId", "PropertyAmenitiesId");

                    b.HasIndex("PropertyAmenitiesId");

                    b.ToTable("PropertyPropertyAmenity");
                });

            modelBuilder.Entity("RoomRoomAmenity", b =>
                {
                    b.Property<Guid>("RoomAmenitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomAmenitiesId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("RoomRoomAmenity");
                });

            modelBuilder.Entity("UnitUnitAmenity", b =>
                {
                    b.Property<Guid>("UnitAmenitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitsId")
                        .HasColumnType("uuid");

                    b.HasKey("UnitAmenitiesId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("UnitUnitAmenity");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AmenityType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Amenities");

                    b.HasDiscriminator<int>("AmenityType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CoverImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BucketOrMainDirectory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Lon")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NoBath")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.Property<int>("NoBed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("NoKitchen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.PropertyAmenity", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.Amenity");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.RoomAmenity", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.Amenity");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.UnitAmenity", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.Amenity");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.CityImageFile", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("CityImageFile");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.InvoiceFile", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("InvoiceFile");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.PropertyImageFile", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("PropertyImageFile");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.RoomImageFile", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("RoomImageFile");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.UnitImageFile", b =>
                {
                    b.HasBaseType("WooneasyManagement.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("UnitImageFile");
                });

            modelBuilder.Entity("PropertyPropertyAmenity", b =>
                {
                    b.HasOne("WooneasyManagement.Domain.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WooneasyManagement.Domain.Entities.PropertyAmenity", null)
                        .WithMany()
                        .HasForeignKey("PropertyAmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomRoomAmenity", b =>
                {
                    b.HasOne("WooneasyManagement.Domain.Entities.RoomAmenity", null)
                        .WithMany()
                        .HasForeignKey("RoomAmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WooneasyManagement.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnitUnitAmenity", b =>
                {
                    b.HasOne("WooneasyManagement.Domain.Entities.UnitAmenity", null)
                        .WithMany()
                        .HasForeignKey("UnitAmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WooneasyManagement.Domain.Entities.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.City", b =>
                {
                    b.HasOne("WooneasyManagement.Domain.Entities.CityImageFile", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId");

                    b.Navigation("CoverImage");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Property", b =>
                {
                    b.HasOne("WooneasyManagement.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Room", b =>
                {
                    b.HasOne("WooneasyManagement.Domain.Entities.RoomType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WooneasyManagement.Domain.Entities.Unit", "Unit")
                        .WithMany("Rooms")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Unit", b =>
                {
                    b.HasOne("WooneasyManagement.Domain.Entities.Property", "Property")
                        .WithMany("Units")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Property", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("WooneasyManagement.Domain.Entities.Unit", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
